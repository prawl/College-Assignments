/*
	Patrick Rawlings
	CSCI 4630
	Spring 2012
	Assignment 2
	2/27/12

	Description:  This program reads in decimal numbers from a file called
	dec.dat and produces their binary conversion to a output file bin.dat. The 
	purpose of this program is to demonstrate the functionality of pipes in
	a linux based system.  Dectobin (Acting as a controller)
	will read in the data, pass the decimal data to another program called 
	"dectohex.cc" which will convert the data into hexidecimal and them pass 
	the hexidecimal result to another program called "hextobin.cc".  Hextobin
	will then take it's data recieved via the pipe and convert the data into
	binary.  Then it will pass it's result back to this program which will
	write the result to a file.  

	I/O format: The input will be recieved from a txt file called "dec.dat" and
	the output will write to a file called "bin.dat"

	Error Handling:   

	ASSUMPTIONS: 
	
	Compiler Instructions: Used g++ compiler. 

*/
//*****************************************************************************	

using namespace std;
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>   
#include <string.h>


main(int argc, char *argv[]){

	pid_t pid;
	char buf[256];
	char input[256];
	
	int pfd[2];
	int pfd2[2];
	int pfd3[2];
	pipe(pfd);

	FILE* inputFile = fopen("dec.dat", "r");

	if (pipe(pfd) || pipe(pfd2) || pipe(pfd3)){
		perror("Pipe failed.\n");
		exit(1);
	}//end if

	while(fgets(input, 256, inputFile) != NULL){
		fprintf(stderr, "sending input: %s", input);
		write(pipe_out[1], input, (strlen(input)));
	}

	int x;
	x = fork();
	if (x == -1) { // fork failed
		perror("Error! Fork failed!");
		exit(1);

	}//end if

	if (x == 0) { // First child' code (bintohex)

		close(pfd[1]);
		dup2(pfd[1],0);

		execl("./dectohex","./dectohex", NULL);	

	}//end 

	int y;
	y = fork();
	if (y == -1) { // fork failed
		perror("Error! Fork failed!");
		exit(1);
	}
	if (y == 0) { // Second child's code (hextobin)

		dup2(pfd[1],0);

		execl("./hextobin","./hextobin", NULL);	

	}//end if
	
	int z;
	z = fork();
	if (z == -1) { // fork failed
		perror("Error! Fork failed!");
		exit(1);
	}
	if (z == 0) { // Second child's code (hextobin)

		dup2(pfd[1],0);

		execl("./dectobin","./dectobin", NULL);	

	}//end if
	else{		
		close(pfd[0]);
		close(pfd[1]);
		close(pfd2[0]);
		close(pfd2[1]);
		close(pfd3[0]);
		close(pfd3[1]);







	  // parents code
		/*while (fgets(input, 256, inputFile) != NULL) {
			fprintf(stderr, "sending input: %s", input);
			write(pipe_out[1], input, (strlen(input)));
		}
		fclose(inputFile);
		//read(pipe_in[0], buf, sizeof(buf));
		*/

	}
	
}//end main




